name: Build all flavors

on:
  schedule:
    # Gotta wait until contributors.json is updated
    - cron: '0 0 * * 0'  # Every Sunday at 0AM

  # Allow manual trigger
  workflow_dispatch:

# Prevent multiple jobs from running at the same time
concurrency:
  group: 'weekly-deploy'
  cancel-in-progress: false  # Don't cancel any in-progress runs in this group

jobs:
  build_time:
    name: Capture current time
    runs-on: ubuntu-latest
    # Set date as a variable
    outputs:
      date: ${{ steps.date.outputs.date }}

    steps:
      - name: Get date
        id: date
        # Output of "October 2 2024" will be "20241002"
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  versioning:
    name: Extract version
    runs-on: ubuntu-latest
    # Set versions as a variable
    outputs:
      # Current version in repository
      downstream: ${{ steps.downstream.outputs.version }}
      # Current version code in repository
      code: ${{ steps.downstream.outputs.code }}
      # Latest build's version
      upstream: ${{ steps.upstream.outputs.version }}
    env:
      GITHUB_REPOSITORY: ${{ github.action_repository }}

    steps:
      - uses: actions/checkout@v4.2.1
        with:
          submodules: true

      - name: Get downstream (local) version
        id: downstream
        run: |
          echo "version=$(grep -E '^\s*versionName\s*=' composeApp/build.gradle.kts | awk -F '\"' '{print $2}')" >> $GITHUB_OUTPUT
          echo "code=$(grep -E '^\s*versionCode\s*=' composeApp/build.gradle.kts | awk -F '= ' '{print $2}')" >> $GITHUB_OUTPUT

      - name: Get upstream version
        id: upstream
        run: |
          tag_name="$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | jq -r .tag_name)"
          echo "version=${tag_name#v}" >> $GITHUB_OUTPUT

  verify-version:
    needs: [versioning]
    name: Verify versions
    runs-on: ubuntu-latest

    steps:
      - name: Whether build can proceed
        run: |
          if [ "${{ needs.versioning.outputs.downstream }}" = "${{ needs.versioning.outputs.upstream }}" ]; then
            exit 1
          fi

      - uses: actions/checkout@v4.2.1
        with:
          submodules: true

      - name: Whether changelogs exists
        run: |
          if [ ! -e "fastlane/metadata/android/en-US/changelogs/${{ needs.versioning.outputs.code }}.txt" ]; then
            exit 1
          fi

  build-full:
    needs: [versioning, verify-version]
    name: Build full version
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4.2.1
        with:
          submodules: true

      - name: Copy changelogs into res/raw
        run: cp "fastlane/metadata/android/en-US/changelogs/${{ needs.versioning.outputs.code }}.txt" "composeApp/src/androidMain/res/raw/release_notes.txt"

      - name: Setup Java 21
        uses: actions/setup-java@v4.7.1
        with:
          java-version: "21"
          distribution: "corretto"

      - name: Restore Gradle dependencies & build cache
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ./build
            ./composeApp/build
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Build with Gradle
        run: ./gradlew assembleFull

      - name: Upload artifacts for signing
        uses: actions/upload-artifact@v4.6.2
        with:
          name: unsigned-full
          path: composeApp/build/outputs/apk/full/*.apk

  build-minified:
    needs: [versioning, verify-version]
    name: Build minified version
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4.2.1
        with:
          submodules: true

      - name: Copy changelogs into res/raw
        run: cp "fastlane/metadata/android/en-US/changelogs/${{ needs.versioning.outputs.code }}.txt" "composeApp/src/androidMain/res/raw/release_notes.txt"

      - name: Setup Java 21
        uses: actions/setup-java@v4.7.1
        with:
          java-version: "21"
          distribution: "corretto"

      - name: Restore Gradle dependencies & build cache
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ./build
            ./composeApp/build
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Build with Gradle
        run: ./gradlew assembleMinified

      - name: Upload artifacts for signing
        uses: actions/upload-artifact@v4.6.2
        with:
          name: unsigned-minified
          path: composeApp/build/outputs/apk/minified/*.apk

  build-izzy:
    needs: [versioning, verify-version]
    name: Build Izzy version
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4.2.1
        with:
          submodules: true

      - name: Copy changelogs into res/raw
        run: cp "fastlane/metadata/android/en-US/changelogs/${{ needs.versioning.outputs.code }}.txt" "composeApp/src/androidMain/res/raw/release_notes.txt"

      - name: Setup Java 21
        uses: actions/setup-java@v4.7.1
        with:
          java-version: "21"
          distribution: "corretto"

      - name: Restore Gradle dependencies & build cache
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ./build
            ./composeApp/build
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Build with Gradle
        run: ./gradlew assembleIzzy

      - name: Upload artifacts for signing
        uses: actions/upload-artifact@v4.6.2
        with:
          name: unsigned-izzy
          path: composeApp/build/outputs/apk/izzy/*.apk

  sign-apks:
    name: (Skipped) Signing APKs - Debug keys used, no signing
    needs:
      - build-full
      - build-minified
      - build-izzy
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          path: upstream/unsigned
          merge-multiple: true

      - name: Skip signing (debug keys used)
        run: echo "Skipping signing step because debug keys are used"

      - name: Upload unsigned APKs for release
        uses: actions/upload-artifact@v4.6.2
        with:
          name: unsigned-apks
          path: upstream/unsigned/*.apk

  upload-to-release:
    needs: [build_time, versioning, sign-apks]
    runs-on: ubuntu-latest

    steps:
      - name: Download unsigned APKs
        uses: actions/download-artifact@v4.3.0
        with:
          name: unsigned-apks

      - name: Upload built APK to release
        uses: softprops/action-gh-release@v2
        with:
          files: '*.apk'
          name: v${{ needs.versioning.outputs.downstream }}-${{ needs.build_time.outputs.date }} | Weekly Build
          tag_name: v${{ needs.versioning.outputs.downstream }}
          make-latest: "true"
          body: |
            <div align="center">
              <img alt="app-logo" src="https://raw.githubusercontent.com/NEVARLeVrai/N-Zik/refs/heads/main/assets/design/ic_banner2.png" />
              <p><b>N-Zik</b> - by @NEVARLeVrai</p>
            </div>
            
            ## ðŸ“² Installation
            
            Download and install `release` version.  
            Download and install `minified` version of the app (smaller size).  
            Only install `full` version if `minified` has installation issues.  
            If you experience any problems, please report them.

            ## What's the difference between `N-Zik-minified.apk` and `N-Zik-full.apk`

            No difference.

            `minified` strips unused code at compile time to reduce APK size.  
            `full` is provided for users who have trouble installing the `minified` version.  
            `release` is provided for normal users.

            ## FAQ

            <details> 
              <summary>Q1: How do I download your build?</summary>
              <blockquote>
                Links to prebuilt APKs are right below this article.<br>
                Select the one that fits your need to start the download.
              </blockquote>
            </details>

            ## Changelogs
            
            Please visit [Changelogs](https://github.com/NEVARLeVrai/N-Zik/blob/main/fastlane/metadata/android/en-US/changelogs/${{ needs.versioning.outputs.code }}.txt).


          token: ${{ secrets.RELEASE_TOKEN }}
          generate_release_notes: true

